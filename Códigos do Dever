using System;


//DEVER 1 Conversão de Binario para decimal

/*
class Program
{
    static void Main()
    {
        Console.WriteLine("Deseja converter binário para decimal[B] ou decimal para binário[D]?");
        char escolha = char.Parse(Console.ReadLine().ToUpper());


        switch (escolha) {
        case 'B':
            Console.WriteLine("Digite o número binário:");
            string NumeroBinario = (Console.ReadLine());
            int ResultadoDecimal = Convert.ToInt32(NumeroBinario, 2);
            Console.WriteLine("O número decimal é: " + ResultadoDecimal);
            break;

        case 'D':

            Console.Write("Digite um número decimal: ");
            int NumeroDecimal = int.Parse(Console.ReadLine());

            string ResultadoBinario = ConverterBinario(NumeroDecimal);

        Console.WriteLine("O número binário é: " + ResultadoBinario);
            break;
        }

         // Conversão de decimal para binário
    static string ConverterBinario(int NumeroDecimal)
    {
        if (NumeroDecimal == 0)
        {
         //Caso o número decimal seja 0, a função imediatamente retorna "0", pois o binário de 0 é 0.
          return "0";
        }

        string NumeroBinario = "";
       //loop while continua executando enquanto o decimalNumber for maior que 0.
        while (NumeroDecimal > 0)
        {
          //Calcula o resto da divisão do número decimal por 2. O resto é sempre 0 ou 1, que são os dígitos do número binário. 
          int Resto = NumeroDecimal % 2;
          NumeroBinario = Resto + NumeroBinario;
          NumeroDecimal /= 2;
        }

        return NumeroBinario;
    }


    }
}

*/
//DEVER 2 Propagção do ERRO


class Program
{
    static void Main(string[] args)
    {
        // Recebe os valores de W e Z e suas aproximações
        double W = LerNumero("Digite o número W: ");
        double Wp = LerNumero("Digite a aproximação do número W: ");
        double Z = LerNumero("Digite o número Z: ");
        double Zp = LerNumero("Digite a aproximação do número Z: ");

        // Calcula e exibe o Erro Relativo de W e Z
        ExibirErroRelativo("W", W, Wp);
        ExibirErroRelativo("Z", Z, Zp);

        // Pergunta se deseja fazer a propagação de erros e executa se necessário
        if (DesejaContinuar("Deseja fazer a propagação de erros? (S/N)"))
        {
            PropagarErro(W, Z, Wp, Zp);
        }
    }

    static double LerNumero(string mensagem)
    {
        Console.Write(mensagem);
        return double.Parse(Console.ReadLine());
    }

    static double CalcularErroRelativo(double valor, double aproximacao)
    {
        return Math.Abs((valor - aproximacao) / valor);
    }

    static void ExibirErroRelativo(string nome, double valor, double aproximacao)
    {
        double erroRelativo = CalcularErroRelativo(valor, aproximacao);
        Console.WriteLine($"Erro relativo de {nome}: {erroRelativo:F7}");
    }

    static bool DesejaContinuar(string mensagem)
    {
        Console.Write(mensagem);
        char opcao = char.Parse(Console.ReadLine().ToUpper());
        return opcao == 'S';
    }

    static void PropagarErro(double W, double Z, double Wp, double Zp)
    {
        double ERw = CalcularErroRelativo(W, Wp);
        double ERz = CalcularErroRelativo(Z, Zp);

        char tipoOperacao = LerOpcao("Digite o tipo de operação: SOMA/SUBTRAÇÃO [S], MULTIPLICAÇÃO [M], DIVISÃO [D]: ");

        double resultado = tipoOperacao switch
        {
            'S' => PropagarSomaSubtracao(Wp, Zp, ERw, ERz),
            'M' => ERw + ERz,
            'D' => ERw + ERz,  // Para divisão, ainda somamos os erros relativos
            _ => throw new ArgumentException("Operação inválida.")
        };

        Console.WriteLine($"Resultado: {resultado:F4}");
    }

    static char LerOpcao(string mensagem)
    {
        Console.Write(mensagem);
        return char.Parse(Console.ReadLine().ToUpper());
    }

    static double PropagarSomaSubtracao(double Wp, double Zp, double ERw, double ERz)
    {
        char subOperacao = LerOpcao("Digite + para soma e - para subtração: ");

        return subOperacao switch
        {
            '+' => (Wp / (Wp + Zp)) * ERw + (Zp / (Wp + Zp)) * ERz,
            '-' => (Wp / (Wp - Zp)) * ERw + (Zp / (Wp - Zp)) * ERz,
            _ => throw new ArgumentException("Suboperação inválida.")
        };
    }
}



//DEVER 3
/* 
// IMPLEMENTAR FUNÇÃO PARA SOLUCIONAR EQUAÇÃO DE 2 GRAU COM FÓRMULA DE BHASKARA
class Program
{
    static void Main()
    {
        // Solicita os coeficientes da equação quadrática
        Console.WriteLine("Digite o coeficiente a:");
        double a = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Digite o coeficiente b:");
        double b = Convert.ToDouble(Console.ReadLine());

        Console.WriteLine("Digite o coeficiente c:");
        double c = Convert.ToDouble(Console.ReadLine());

        // Calcula o discriminante
        double delta = b * b - 4 * a * c;

        // Verifica se o discriminante é negativo
        if (delta < 0)
        {
            Console.WriteLine("A equação não possui raízes reais.");
        }
        else if (delta == 0)
        {
            // Há uma raiz real
            double x = -b / (2 * a);
            Console.WriteLine($"A equação possui uma raiz real: x = {x}");
        }
        else
        {
            //Sqrt é usado para calcular a raiz quadrada de um número.            
            // Há duas raízes reais
            double x1 = (-b + Math.Sqrt(delta)) / (2 * a);
            double x2 = (-b - Math.Sqrt(delta)) / (2 * a);
            Console.WriteLine($"A equação possui duas raízes reais: x1 = {x1} e x2 = {x2}");
        }
    }
}

*/

/* Dever 4
//ENCONTRE AS RAÍZES DA EQUAÇÃO 
class Program
{
    static void Main()
    {
        double[] coeficientes = { 1, -2, -5, 6 }; // Coeficientes da equação cúbica

        Console.WriteLine("Raízes da equação x^3 - 2x^2 - 5x + 6 = 0");

        // Utilizando o método de busca de raízes para encontrar raízes aproximadas
        double raiz1 = EncontrarRaiz(-3, -1, coeficientes);
        double raiz2 = EncontrarRaiz(0, 1, coeficientes);
        double raiz3 = EncontrarRaiz(2, 3, coeficientes);

        // Refinando as raízes encontradas utilizando o Método de Newton-Raphson
        raiz1 = NewtonRaphson(raiz1, coeficientes);
        raiz2 = NewtonRaphson(raiz2, coeficientes);
        raiz3 = NewtonRaphson(raiz3, coeficientes);

        Console.WriteLine($"Raiz 1: {raiz1:F4}");
        Console.WriteLine($"Raiz 2: {raiz2:F4}");
        Console.WriteLine($"Raiz 3: {raiz3:F4}");
    }

    // Função para calcular o valor do polinômio em x
    static double FuncaoPolinomio(double x, double[] coef)
    {
        return coef[0] * Math.Pow(x, 3) + coef[1] * Math.Pow(x, 2) + coef[2] * x + coef[3];
    }

    // Função para calcular a derivada do polinômio em x
    static double DerivadaPolinomio(double x, double[] coef)
    {
        return 3 * coef[0] * Math.Pow(x, 2) + 2 * coef[1] * x + coef[2];
    }

    // Método de busca simples para encontrar uma raiz aproximada entre dois valores
    static double EncontrarRaiz(double inicio, double fim, double[] coef)
    {
        double meio;
        while ((fim - inicio) >= 0.001)
        {
            meio = (inicio + fim) / 2;
            if (FuncaoPolinomio(meio, coef) == 0.0)
                return meio;
            else if (FuncaoPolinomio(meio, coef) * FuncaoPolinomio(inicio, coef) < 0)
                fim = meio;
            else
                inicio = meio;
        }
        return (inicio + fim) / 2;
    }

    // Método de Newton-Raphson para refinar a raiz
    static double NewtonRaphson(double x, double[] coef)
    {
        double h = FuncaoPolinomio(x, coef) / DerivadaPolinomio(x, coef);
        while (Math.Abs(h) >= 0.001)
        {
            h = FuncaoPolinomio(x, coef) / DerivadaPolinomio(x, coef);
            x = x - h;
        }
        return x;
    }
} *\


/* Dever 5
//IMPLEMENTAR FUNÇÃO DE BUSCA DE ZERO DE FUNÇÕES
//Você pode modificar a função Funcao para representar qualquer função contínua
f(x) para a qual você deseja encontrar o zero. Além disso, você pode ajustar os valores de a,b e a precisão para adaptar o código ao problema específico que está resolvendo.

class Program
{
    static void Main()
    {
        // Define os limites do intervalo [a, b] e a precisão desejada
        double a = -2;  // Limite inferior do intervalo
        double b = 3;   // Limite superior do intervalo
        double precisao = 0.001;  // Precisão desejada

        // Chama o método da bisseção para encontrar a raiz
        double raiz = MetodoBissecao(a, b, precisao);

        // Exibe o resultado
        Console.WriteLine($"A raiz da função é aproximadamente: {raiz:F6}");
    }

    // Função que implementa o método da bisseção
    static double MetodoBissecao(double a, double b, double precisao)
    {
        if (Funcao(a) * Funcao(b) >= 0)
        {
            Console.WriteLine("O método da bisseção não pode ser aplicado.");
            return double.NaN;  // Retorna NaN se o intervalo não é válido
        }

        double c = a;
        while ((b - a) >= precisao)
        {
            // Encontra o ponto médio
            c = (a + b) / 2;

            // Verifica se o ponto médio é uma raiz
            if (Funcao(c) == 0.0)
                break;

            // Decide o lado em que a raiz está
            if (Funcao(c) * Funcao(a) < 0)
                b = c;
            else
                a = c;
        }
        return c;
    }

    // Função exemplo: f(x) = x^3 - x^2 - 1
    static double Funcao(double x)
    {
        return Math.Pow(x, 3) - x * x - 1;
    }
}
*\
